use core::prelude;

fn main() {
    println!("1.2 格式化打印");
    println!("笔记路径./docs/01_hello_world/02_formatted_print.md");

    println!("--------------------------------------------------------");
    // 想要打印`{}`,需要在占位符中嵌入一个{}字符串
    println!("`{{}}`被用作占位符,通常会自动替换成任何参数");
    println!("这些参数会被转换成字符串");
    println!("如: 9月有{}天", 30);

    println!("--------------------------------------------------------");
    // 可以使用位置参数. 在`{}`中指定一个整数
    // 来决定额外占位符指代哪些参数
    // 其中参数编号从格式化字符串后立即开始,参数索引从 0 开始.

    // 这里为了容易区分,使用`\n`换行符来将两句话换行
    println!("{0},这是{1}.\n{1},这是{0}.", "Muzhongweiliang", "Autumn");

    // 还可以使用命名参数
    println!(
        "{subject} {verb} {object}",      // 主 谓 宾
        object = "那只懒惰的狗🐕",        // 宾
        subject = "那只敏捷的棕色狐狸🦊", // 主
        verb = "跳过"                     // 谓
    );

    println!("--------------------------------------------------------");
    // 在 `{:}`中的`:`后面加上指定格式字符,可以调用不同格式化方式
    println!("十进制:               {}", 69420); // 69420
    println!("二进制:               {:b}", 69420); // 10000111100101100
    println!("八进制:               {:o}", 69420); // 207454
    println!("十六进制:             {:x}", 69420); // 10f2c

    println!("--------------------------------------------------------");
    // 可以指定宽度来右对齐文本
    // 这将输出"    1"(四个空格和一个"1",总宽度为5).
    println!("{number:>5}", number = 1);
    // 这里打印"%%%%1"来进行长度对比
    println!("%%%%{number}", number = 1);

    println!("--------------------------------------------------------");
    // 可以用额外的"0"来填充数字
    println!("{number:0>5}", number = 1); // 00001
    // 通过翻转符号来左对齐
    println!("{number:0<5}", number = 1); // 10000
    // 在格式说明符后提娜佳`$`可以使用命名参数
    println!("{number:0>width$}", number = 1, width = 5); //00001

    println!("--------------------------------------------------------");
    // 在 Rust 1.58 及以上版本，你可以直接从周围的变量捕获参数
    // 就像上面一样，这将输出 "    1",4 个空格和一个 "1"
    let number: f64 = 1.0;
    let width: usize = 5;
    println!("{number:>width$}");
}
